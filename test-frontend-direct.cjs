// P≈ô√≠m√Ω test frontend p≈ôihl√°≈°en√≠ formul√°≈ôe
const fetch = require('node-fetch');

async function testFrontendLogin() {
  console.log('üéØ P≈ò√çM√ù TEST FRONTEND P≈òIHL√Å≈†EN√ç');
  console.log('=================================\n');

  try {
    // 1. Test API endpoint p≈ô√≠mo
    console.log('1Ô∏è‚É£ Test API endpointu...');
    const apiResponse = await fetch('http://localhost:5000/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        username: 'admin@doklad.ai',
        password: 'admin123'
      })
    });

    const apiData = await apiResponse.json();
    console.log(`   API Status: ${apiResponse.status}`);
    console.log(`   API Response: ${JSON.stringify(apiData, null, 2)}`);

    if (apiResponse.status !== 200) {
      console.log('‚ùå API nefunguje - konec testu');
      return;
    }

    // 2. Test login str√°nky
    console.log('\n2Ô∏è‚É£ Test p≈ô√≠stupu k login str√°nce...');
    const loginPageResponse = await fetch('http://localhost:5000/login');
    console.log(`   Login page status: ${loginPageResponse.status}`);

    if (loginPageResponse.status === 200) {
      console.log('   ‚úÖ Login str√°nka je dostupn√°');
    } else {
      console.log('   ‚ùå Login str√°nka nen√≠ dostupn√°');
    }

    // 3. Test admin route p≈ô√≠stupu
    console.log('\n3Ô∏è‚É£ Test admin route...');
    const adminResponse = await fetch('http://localhost:5000/admin');
    console.log(`   Admin page status: ${adminResponse.status}`);

    // 4. Test session validation
    console.log('\n4Ô∏è‚É£ Test session validation...');
    const sessionResponse = await fetch('http://localhost:5000/api/auth/validate', {
      headers: {
        'Authorization': `Bearer ${apiData.sessionId}`
      }
    });

    const sessionData = await sessionResponse.json();
    console.log(`   Session status: ${sessionResponse.status}`);
    console.log(`   Session data: ${JSON.stringify(sessionData, null, 2)}`);

    // 5. Resum√©
    console.log('\nüìã RESUM√â:');
    console.log(`   ‚úÖ API p≈ôihl√°≈°en√≠: FUNGUJE (200)`);
    console.log(`   ${loginPageResponse.status === 200 ? '‚úÖ' : '‚ùå'} Login str√°nka: ${loginPageResponse.status === 200 ? 'DOSTUPN√Å' : 'NEDOSTUPN√Å'}`);
    console.log(`   ${adminResponse.status === 200 ? '‚úÖ' : '‚ùå'} Admin str√°nka: ${adminResponse.status === 200 ? 'DOSTUPN√Å' : 'NEDOSTUPN√Å'}`);
    console.log(`   ${sessionResponse.status === 200 ? '‚úÖ' : '‚ùå'} Session validace: ${sessionResponse.status === 200 ? 'FUNGUJE' : 'NEFUNGUJE'}`);

    if (apiResponse.status === 200 && sessionResponse.status === 200) {
      console.log('\nüéâ Z√ÅVƒöR: Backend a API funguj√≠ spr√°vnƒõ!');
      console.log('   Probl√©m je pravdƒõpodobnƒõ ve frontend React komponentƒõ.');
      console.log('   Doporuƒçen√≠: Zkontrolovat Network tab v Developer Tools p≈ôi p≈ôihl√°≈°en√≠.');
    }

  } catch (error) {
    console.log(`üí• Test selhal: ${error.message}`);
  }
}

testFrontendLogin().catch(console.error);