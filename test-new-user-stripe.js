#!/usr/bin/env node

/**
 * TEST STRIPE S NOV√ùM U≈ΩIVATELEM
 */

console.log('üë§ TEST STRIPE S NOV√ùM U≈ΩIVATELEM');
console.log('=================================');
console.log('');

async function testNewUserStripe() {
  const baseUrl = 'http://localhost:5000';
  const timestamp = Date.now();
  
  try {
    // 1. Vytvo≈ô test u≈æivatele
    console.log('1. üîß Vytv√°≈ôen√≠ nov√©ho test u≈æivatele...');
    const registerResponse = await fetch(`${baseUrl}/api/auth/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        user: {
          firstName: 'Stripe',
          lastName: 'Tester',
          email: `stripe-test-${timestamp}@test.com`,
          password: 'test123456',
          username: `stripe-test-${timestamp}@test.com`
        },
        company: {
          name: `Test Company ${timestamp}`,
          ico: '12345678',
          dic: 'CZ12345678',
          address: 'Test Street 123',
          city: 'Praha',
          postalCode: '10000'
        }
      })
    });

    if (!registerResponse.ok) {
      const errorText = await registerResponse.text();
      console.log(`‚ùå Registrace selhala: ${registerResponse.status}`);
      console.log(`   Error: ${errorText}`);
      return;
    }

    console.log('‚úÖ Test u≈æivatel vytvo≈ôen!');
    
    // 2. P≈ôihla≈° se
    console.log('');
    console.log('2. üîê P≈ôihla≈°ov√°n√≠...');
    const loginResponse = await fetch(`${baseUrl}/api/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        username: `stripe-test-${timestamp}@test.com`,
        password: 'test123456'
      })
    });

    if (!loginResponse.ok) {
      console.log(`‚ùå P≈ôihl√°≈°en√≠ selhalo: ${loginResponse.status}`);
      return;
    }

    const loginData = await loginResponse.json();
    console.log('‚úÖ P≈ôihl√°≈°en√≠ √∫spƒõ≈°n√©!');

    // 3. Test Stripe s session cookie
    console.log('');
    console.log('3. üìä Testov√°n√≠ Stripe s nov√Ωm u≈æivatelem...');
    
    // Use session ID from login data
    const sessionId = loginData.sessionId;

    const statusResponse = await fetch(`${baseUrl}/api/stripe/subscription-status`, {
      headers: { 'Authorization': `Bearer ${sessionId}` }
    });

    if (statusResponse.ok) {
      const statusData = await statusResponse.json();
      console.log('‚úÖ Nov√Ω u≈æivatel m≈Ø≈æe p≈ôistupovat ke Stripe!');
      console.log(`   Status: ${statusData.status || '≈æ√°dn√© p≈ôedplatn√©'}`);
      console.log(`   User ID: ${loginData.user?.id}`);
    } else {
      console.log(`‚ùå Stripe status pro nov√©ho u≈æivatele: ${statusResponse.status}`);
      const errorText = await statusResponse.text();
      console.log(`   Error: ${errorText}`);
      return;
    }

    // 4. Test checkout session creation
    console.log('');
    console.log('4. üí≥ Testov√°n√≠ vytvo≈ôen√≠ checkout session...');
    const checkoutResponse = await fetch(`${baseUrl}/api/stripe/create-checkout-session`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${sessionId}`,
        'Content-Type': 'application/json'
      }
    });

    if (checkoutResponse.ok) {
      const checkoutData = await checkoutResponse.json();
      console.log('‚úÖ Checkout session pro nov√©ho u≈æivatele funguje!');
      console.log('');
      console.log('üéØ STRIPE INTEGRATION FUNGUJE PRO NOV√â U≈ΩIVATELE!');
      console.log('==================================================');
      console.log(`URL: ${checkoutData.url}`);
      console.log('');
      console.log('üí≥ Test s kartou 4242424242424242 (≈æ√°dn√© skuteƒçn√© pen√≠ze)');
      
    } else {
      console.log(`‚ùå Checkout pro nov√©ho u≈æivatele: ${checkoutResponse.status}`);
      const errorText = await checkoutResponse.text();
      console.log(`   Error: ${errorText}`);
    }

  } catch (error) {
    console.error('üö® Test error:', error.message);
  }
}

testNewUserStripe();