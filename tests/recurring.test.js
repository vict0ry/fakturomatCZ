/**
 * Recurring Invoices Tests - Automated Invoice Generation
 * Run with: node tests/recurring.test.js
 */

import { apiRequest } from './helpers/test-utils.js';

const BASE_URL = 'http://localhost:5000';

class RecurringTester {
  constructor() {
    this.passed = 0;
    this.failed = 0;
    this.results = [];
  }

  async test(name, testFn) {
    try {
      console.log(`üîÑ Testing: ${name}`);
      await testFn();
      console.log(`‚úÖ PASSED: ${name}`);
      this.passed++;
      this.results.push({ name, status: 'PASSED' });
    } catch (error) {
      console.log(`‚ùå FAILED: ${name} - ${error.message}`);
      this.failed++;
      this.results.push({ name, status: 'FAILED', error: error.message });
    }
  }

  summary() {
    console.log('\n=== RECURRING INVOICES TEST SUMMARY ===');
    console.log(`‚úÖ Passed: ${this.passed}`);
    console.log(`‚ùå Failed: ${this.failed}`);
    console.log(`üìä Total: ${this.passed + this.failed}`);
    
    if (this.failed > 0) {
      console.log('\n‚ùå Failed Tests:');
      this.results.filter(r => r.status === 'FAILED').forEach(r => {
        console.log(`  - ${r.name}: ${r.error}`);
      });
    }
    
    return this.failed === 0;
  }
}

async function testCreateRecurringInvoice() {
  console.log('\nüìÖ Test: Vytvo≈ôen√≠ opakuj√≠c√≠ se faktury');
  
  // Nejprve vytvo≈ô√≠me ≈°ablonu faktury
  const templateData = {
    customerId: 1,
    type: 'invoice',
    issueDate: new Date().toISOString(),
    dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
    subtotal: '5000.00',
    vatAmount: '1050.00',
    total: '6050.00',
    currency: 'CZK',
    notes: '≈†ablona pro opakuj√≠c√≠ se fakturu - mƒõs√≠ƒçn√≠ hosting'
  };
  
  const { response: templateResponse, data: template } = await apiRequest('/api/invoices', {
    method: 'POST',
    body: JSON.stringify(templateData)
  });
  
  if (!templateResponse.ok) {
    throw new Error('Nepoda≈ôilo se vytvo≈ôit ≈°ablonu faktury');
  }
  
  console.log(`   ‚úÖ ≈†ablona faktury vytvo≈ôena: ${template.invoiceNumber}`);
  
  // Nyn√≠ vytvo≈ô√≠me recurring schedule
  const recurringData = {
    templateInvoiceId: template.id,
    customerId: 1,
    pattern: {
      frequency: 'monthly',
      interval: 1,
      maxOccurrences: 12
    },
    isActive: true,
    nextGenerationDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
  };
  
  const { response, data } = await apiRequest('/api/invoices/recurring', {
    method: 'POST',
    body: JSON.stringify(recurringData)
  });
  
  if (response.ok) {
    console.log('‚úÖ Opakuj√≠c√≠ se faktura nastavena');
    console.log(`   ID: ${data.id}, Pattern: ${data.pattern.frequency}`);
    return { recurringId: data.id, templateId: template.id };
  } else {
    throw new Error(`Chyba p≈ôi vytv√°≈ôen√≠ recurring faktury: ${JSON.stringify(data)}`);
  }
}

async function testRecurringPatterns() {
  console.log('\n‚è±Ô∏è Test: R≈Øzn√© vzory opakov√°n√≠');
  
  const patterns = [
    {
      name: 'T√Ωdenn√≠',
      frequency: 'weekly',
      interval: 1,
      maxOccurrences: 4
    },
    {
      name: 'Mƒõs√≠ƒçn√≠',
      frequency: 'monthly', 
      interval: 1,
      maxOccurrences: 12
    },
    {
      name: 'ƒåtvrtletn√≠',
      frequency: 'quarterly',
      interval: 1,
      maxOccurrences: 4
    },
    {
      name: 'Roƒçn√≠',
      frequency: 'yearly',
      interval: 1,
      maxOccurrences: 3
    }
  ];
  
  let allSuccessful = true;
  
  for (const pattern of patterns) {
    console.log(`   ‚Üí Testov√°n√≠ ${pattern.name} vzoru`);
    
    const recurringData = {
      templateInvoiceId: 1, // P≈ôedpokl√°d√°me existuj√≠c√≠ ≈°ablonu
      customerId: 1,
      pattern: pattern,
      isActive: true,
      nextGenerationDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
    };
    
    const { response, data } = await apiRequest('/api/invoices/recurring', {
      method: 'POST',
      body: JSON.stringify(recurringData)
    });
    
    if (response.ok) {
      console.log(`     ‚úÖ ${pattern.name} vzor vytvo≈ôen`);
    } else {
      console.log(`     ‚ùå ${pattern.name} vzor selhal:`, data);
      allSuccessful = false;
    }
  }
  
  return allSuccessful;
}

async function testRecurringInvoiceGeneration() {
  console.log('\nüéØ Test: Generov√°n√≠ faktur z recurring');
  
  // Spust√≠me manu√°ln√≠ generov√°n√≠ due faktur
  const { response, data } = await apiRequest('/api/invoices/recurring/generate', {
    method: 'POST'
  });
  
  if (response.ok) {
    console.log(`‚úÖ Generov√°n√≠ dokonƒçeno - ${data.generated} faktur`);
    
    if (data.invoices && data.invoices.length > 0) {
      console.log('   üìã Vygenerovan√© faktury:');
      data.invoices.forEach(invoice => {
        console.log(`     - ${invoice.invoiceNumber} (${invoice.total} ${invoice.currency})`);
      });
    }
    
    return data.invoices || [];
  } else {
    throw new Error(`Chyba p≈ôi generov√°n√≠ recurring faktur: ${JSON.stringify(data)}`);
  }
}

async function testRecurringScheduleUpdates(recurringId) {
  console.log('\n‚úèÔ∏è Test: √öprava recurring schedule');
  
  if (!recurringId) {
    console.log('‚ö†Ô∏è P≈ôeskakujem test - chyb√≠ ID recurring');
    return false;
  }
  
  const updates = [
    {
      name: 'Zmƒõna intervalu',
      data: { 
        pattern: {
          frequency: 'monthly',
          interval: 2, // Ka≈æd√© 2 mƒõs√≠ce
          maxOccurrences: 6
        }
      }
    },
    {
      name: 'Deaktivace',
      data: { isActive: false }
    },
    {
      name: 'Aktivace',
      data: { isActive: true }
    }
  ];
  
  let allSuccessful = true;
  
  for (const update of updates) {
    console.log(`   ‚Üí ${update.name}`);
    
    const { response, data } = await apiRequest(`/api/invoices/recurring/${recurringId}`, {
      method: 'PATCH',
      body: JSON.stringify(update.data)
    });
    
    if (response.ok) {
      console.log(`     ‚úÖ ${update.name} - √∫spƒõch`);
    } else {
      console.log(`     ‚ùå ${update.name} - chyba:`, data);
      allSuccessful = false;
    }
  }
  
  return allSuccessful;
}

async function testRecurringInvoicesList() {
  console.log('\nüìã Test: Seznam recurring faktur');
  
  const { response, data } = await apiRequest('/api/invoices/recurring');
  
  if (response.ok) {
    console.log(`‚úÖ Seznam naƒçten - ${data.length} recurring faktur`);
    
    if (data.length > 0) {
      const recurring = data[0];
      const requiredFields = ['id', 'templateInvoiceId', 'pattern', 'isActive', 'nextGenerationDate'];
      const hasAllFields = requiredFields.every(field => recurring.hasOwnProperty(field));
      
      if (hasAllFields) {
        console.log('   ‚úÖ Struktura dat v po≈ô√°dku');
        
        // Ovƒõ≈ô√≠me pattern parsing
        try {
          const pattern = typeof recurring.pattern === 'string' 
            ? JSON.parse(recurring.pattern) 
            : recurring.pattern;
          
          if (pattern.frequency && pattern.interval) {
            console.log(`   ‚úÖ Pattern je spr√°vnƒõ parsov√°n (${pattern.frequency}/${pattern.interval})`);
            return true;
          } else {
            throw new Error('Pattern nem√° po≈æadovan√© pole');
          }
        } catch (error) {
          console.log('   ‚ùå Chyba p≈ôi parsov√°n√≠ pattern:', error.message);
          return false;
        }
      } else {
        console.log('   ‚ùå Chyb√≠ povinn√° pole v datech');
        return false;
      }
    }
    
    return true;
  } else {
    throw new Error(`Chyba p≈ôi naƒç√≠t√°n√≠ recurring faktur: ${JSON.stringify(data)}`);
  }
}

async function testRecurringDeletionAndCleanup(recurringId) {
  console.log('\nüóëÔ∏è Test: Smaz√°n√≠ recurring faktury');
  
  if (!recurringId) {
    console.log('‚ö†Ô∏è P≈ôeskakujem test - chyb√≠ ID recurring');
    return false;
  }
  
  const { response, data } = await apiRequest(`/api/invoices/recurring/${recurringId}`, {
    method: 'DELETE'
  });
  
  if (response.ok) {
    console.log('‚úÖ Recurring faktura smaz√°na');
    
    // Ovƒõ≈ô√≠me, ≈æe u≈æ nen√≠ v seznamu
    const { response: listResponse, data: listData } = await apiRequest('/api/invoices/recurring');
    
    if (listResponse.ok) {
      const found = listData.find(r => r.id === recurringId);
      if (!found) {
        console.log('   ‚úÖ Recurring faktura u≈æ nen√≠ v seznamu');
        return true;
      } else {
        console.log('   ‚ùå Recurring faktura st√°le existuje v seznamu');
        return false;
      }
    }
    
    return true;
  } else {
    throw new Error(`Chyba p≈ôi maz√°n√≠ recurring faktury: ${JSON.stringify(data)}`);
  }
}

async function testRecurringValidation() {
  console.log('\n‚úÖ Test: Validace recurring parametr≈Ø');
  
  const invalidTests = [
    {
      name: 'Neplatn√° frekvence',
      data: { frequency: 'invalid', interval: 1 },
      expectedError: 'frequency'
    },
    {
      name: 'Nulov√Ω interval',
      data: { frequency: 'monthly', interval: 0 },
      expectedError: 'interval'
    },
    {
      name: 'Z√°porn√Ω maxOccurrences',
      data: { frequency: 'monthly', interval: 1, maxOccurrences: -1 },
      expectedError: 'maxOccurrences'
    }
  ];
  
  let allCorrect = true;
  
  for (const test of invalidTests) {
    try {
      const { response, data } = await apiRequest('/api/invoices/recurring', {
        method: 'POST',
        body: JSON.stringify({
          templateInvoiceId: 1,
          customerId: 1,
          pattern: test.data,
          isActive: true,
          nextGenerationDate: new Date().toISOString()
        })
      });
      
      if (response.ok) {
        console.log(`   ‚ùå ${test.name} - mƒõlo selhat, ale pro≈°lo`);
        allCorrect = false;
      } else {
        console.log(`   ‚úÖ ${test.name} - spr√°vnƒõ odm√≠tnuto`);
      }
    } catch (error) {
      console.log(`   ‚úÖ ${test.name} - spr√°vnƒõ odm√≠tnuto s chybou`);
    }
  }
  
  return allCorrect;
}

export async function runRecurringTests() {
  console.log('üéØ SPOU≈†T√çM RECURRING FAKTURY TESTY');
  console.log('='.repeat(40));
  
  const tester = new RecurringTester();
  let testData = { recurringId: null, templateId: null };
  
  await tester.test('Create Recurring Invoice', async () => {
    testData = await testCreateRecurringInvoice();
    if (!testData.recurringId) throw new Error('Nepoda≈ôilo se vytvo≈ôit recurring fakturu');
  });
  
  await tester.test('Recurring Patterns', testRecurringPatterns);
  await tester.test('Invoice Generation', testRecurringInvoiceGeneration);
  
  await tester.test('Schedule Updates', async () => {
    const success = await testRecurringScheduleUpdates(testData.recurringId);
    if (!success) throw new Error('Nepoda≈ôily se v≈°echny √∫pravy');
  });
  
  await tester.test('Recurring List', testRecurringInvoicesList);
  await tester.test('Validation', testRecurringValidation);
  
  await tester.test('Cleanup', async () => {
    const success = await testRecurringDeletionAndCleanup(testData.recurringId);
    if (!success) throw new Error('Nepoda≈ôilo se smazat recurring fakturu');
  });
  
  return tester.summary();
}

// Spu≈°tƒõn√≠ test≈Ø pokud je soubor spu≈°tƒõn p≈ô√≠mo
if (import.meta.url === `file://${process.argv[1]}`) {
  runRecurringTests().then(success => {
    process.exit(success ? 0 : 1);
  }).catch(error => {
    console.error('Chyba p≈ôi spou≈°tƒõn√≠ test≈Ø:', error);
    process.exit(1);
  });
}