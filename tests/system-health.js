#!/usr/bin/env node

/**
 * ü©∫ System Health Check
 * Quick health check for all critical system components
 */

import { checkServerHealth, testApiEndpoint, formatDuration, authenticateTestUser } from './helpers/test-utils.js';

async function runSystemHealthCheck() {
  console.log('ü©∫ === SYSTEM HEALTH CHECK ===\n');
  
  const startTime = Date.now();
  const checks = [];

  // 1. Server Health
  console.log('üîç Checking server connectivity...');
  const serverHealthy = await checkServerHealth();
  checks.push({
    name: 'Server Connectivity',
    status: serverHealthy,
    critical: true
  });
  console.log(serverHealthy ? '‚úÖ Server is running' : '‚ùå Server not accessible');

  if (!serverHealthy) {
    console.log('\n‚ùå Cannot proceed - server is not running');
    console.log('üí° Start the server with: npm run dev');
    return;
  }

  // 2. Database Connection
  console.log('\nüóÑÔ∏è Checking database connection...');
  try {
    const dbResponse = await testApiEndpoint('GET', '/api/invoices');
    const dbHealthy = dbResponse.success || dbResponse.status === 401;
    checks.push({
      name: 'Database Connection',
      status: dbHealthy,
      critical: true
    });
    console.log(dbHealthy ? '‚úÖ Database accessible' : '‚ùå Database connection failed');
  } catch (error) {
    checks.push({
      name: 'Database Connection',
      status: false,
      critical: true
    });
    console.log('‚ùå Database connection error');
  }

  // 3. Authentication System
  console.log('\nüîê Checking authentication system...');
  try {
    const authResponse = await testApiEndpoint('GET', '/api/auth/validate');
    const authHealthy = authResponse.status === 401 || authResponse.success;
    checks.push({
      name: 'Authentication System',
      status: authHealthy,
      critical: true
    });
    console.log(authHealthy ? '‚úÖ Authentication system working' : '‚ùå Authentication system failed');
  } catch (error) {
    checks.push({
      name: 'Authentication System',
      status: false,
      critical: true
    });
    console.log('‚ùå Authentication system error');
  }

  // 4. AI Assistant
  console.log('\nü§ñ Checking AI assistant...');
  try {
    const aiResponse = await testApiEndpoint('POST', '/api/chat', {
      message: 'test',
      sessionId: 'health-check'
    });
    const aiHealthy = aiResponse.success || aiResponse.error?.includes('OpenAI');
    checks.push({
      name: 'AI Assistant',
      status: aiHealthy,
      critical: false
    });
    console.log(aiHealthy ? '‚úÖ AI assistant accessible' : '‚ùå AI assistant failed');
  } catch (error) {
    checks.push({
      name: 'AI Assistant',
      status: false,
      critical: false
    });
    console.log('‚ùå AI assistant error');
  }

  // 5. Expense API
  console.log('\nüí∞ Checking expense management...');
  try {
    const expenseResponse = await testApiEndpoint('GET', '/api/expenses');
    const expenseHealthy = expenseResponse.success || expenseResponse.status === 401;
    checks.push({
      name: 'Expense Management',
      status: expenseHealthy,
      critical: true
    });
    console.log(expenseHealthy ? '‚úÖ Expense management working' : '‚ùå Expense management failed');
  } catch (error) {
    checks.push({
      name: 'Expense Management',
      status: false,
      critical: true
    });
    console.log('‚ùå Expense management error');
  }

  // 6. PDF Generation
  console.log('\nüìÑ Checking PDF generation...');
  try {
    const pdfResponse = await testApiEndpoint('GET', '/api/invoices/1/pdf');
    const pdfHealthy = pdfResponse.status !== 500; // Any response except 500 is ok
    checks.push({
      name: 'PDF Generation',
      status: pdfHealthy,
      critical: false
    });
    console.log(pdfHealthy ? '‚úÖ PDF generation accessible' : '‚ùå PDF generation failed');
  } catch (error) {
    checks.push({
      name: 'PDF Generation',
      status: false,
      critical: false
    });
    console.log('‚ùå PDF generation error');
  }

  // Results
  console.log('\n' + '='.repeat(50));
  console.log('üìä HEALTH CHECK RESULTS');
  console.log('='.repeat(50));
  
  const criticalIssues = checks.filter(c => c.critical && !c.status);
  const nonCriticalIssues = checks.filter(c => !c.critical && !c.status);
  const allHealthy = checks.every(c => c.status);
  
  checks.forEach(check => {
    const status = check.status ? '‚úÖ' : '‚ùå';
    const priority = check.critical ? 'üî¥' : 'üü°';
    console.log(`${status} ${priority} ${check.name}`);
  });
  
  console.log(`\n‚è±Ô∏è Health check completed in ${formatDuration(Date.now() - startTime)}`);
  
  if (allHealthy) {
    console.log('\nüü¢ EXCELLENT - All systems healthy');
    console.log('üöÄ System ready for use');
  } else if (criticalIssues.length === 0) {
    console.log('\nüü° GOOD - Core systems healthy');
    console.log(`‚ö†Ô∏è ${nonCriticalIssues.length} non-critical issue(s) detected`);
    console.log('‚úÖ System safe to use');
  } else {
    console.log('\nüî¥ CRITICAL - Major issues detected');
    console.log(`‚ùå ${criticalIssues.length} critical system(s) failing`);
    console.log('üö® System needs immediate attention');
  }
  
  console.log('\nüí° NEXT STEPS:');
  if (allHealthy) {
    console.log('   üìã Run comprehensive tests: node tests/comprehensive.test.js');
    console.log('   üéØ System is ready for production use');
  } else {
    console.log('   üîß Fix critical issues before running full tests');
    console.log('   üìû Contact development team if issues persist');
    if (criticalIssues.some(c => c.name.includes('Server'))) {
      console.log('   üöÄ Start server: npm run dev');
    }
    if (criticalIssues.some(c => c.name.includes('Database'))) {
      console.log('   üóÑÔ∏è Check database connection and credentials');
    }
  }
  
  console.log('='.repeat(50));
}

// Run health check if called directly  
if (import.meta.url === `file://${process.argv[1]}`) {
  runSystemHealthCheck().catch(error => {
    console.error('‚ùå Health check failed:', error.message);
    process.exit(1);
  });
}

export { runSystemHealthCheck };