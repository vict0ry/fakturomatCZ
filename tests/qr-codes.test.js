/**
 * QR Codes Tests - QR Code Generation Functionality
 * Run with: node tests/qr-codes.test.js
 */

import { apiRequest } from './helpers/test-utils.js';

const BASE_URL = 'http://localhost:5000';

class QRTester {
  constructor() {
    this.passed = 0;
    this.failed = 0;
    this.results = [];
  }

  async test(name, testFn) {
    try {
      console.log(`üî≤ Testing: ${name}`);
      await testFn();
      console.log(`‚úÖ PASSED: ${name}`);
      this.passed++;
      this.results.push({ name, status: 'PASSED' });
    } catch (error) {
      console.log(`‚ùå FAILED: ${name} - ${error.message}`);
      this.failed++;
      this.results.push({ name, status: 'FAILED', error: error.message });
    }
  }

  summary() {
    console.log('\n=== QR CODES TEST SUMMARY ===');
    console.log(`‚úÖ Passed: ${this.passed}`);
    console.log(`‚ùå Failed: ${this.failed}`);
    console.log(`üìä Total: ${this.passed + this.failed}`);
    
    if (this.failed > 0) {
      console.log('\n‚ùå Failed Tests:');
      this.results.filter(r => r.status === 'FAILED').forEach(r => {
        console.log(`  - ${r.name}: ${r.error}`);
      });
    }
    
    return this.failed === 0;
  }
}

async function testQRCodeGeneration() {
  console.log('\nüî≤ Test: Z√°kladn√≠ generov√°n√≠ QR k√≥du');
  
  const { response, data } = await apiRequest('/api/qr/generate', {
    method: 'POST',
    body: JSON.stringify({
      type: 'payment',
      amount: 1500.50,
      currency: 'CZK',
      iban: 'CZ1234567890123456789012',
      variableSymbol: '12345678',
      constantSymbol: '0308',
      recipient: 'Test s.r.o.',
      message: 'Platba za fakturu'
    })
  });
  
  if (response.ok && data.qrCode) {
    console.log('‚úÖ QR k√≥d vygenerov√°n');
    
    // Ovƒõ≈ô√≠me, ≈æe je to validn√≠ base64 data URL
    if (data.qrCode.startsWith('data:image/png;base64,')) {
      console.log('   ‚úÖ Form√°t QR k√≥du je spr√°vn√Ω (base64 PNG)');
      return data.qrCode;
    } else {
      throw new Error('QR k√≥d nem√° spr√°vn√Ω form√°t');
    }
  } else {
    throw new Error(`Chyba p≈ôi generov√°n√≠ QR k√≥du: ${JSON.stringify(data)}`);
  }
}

async function testSPAYDFormat() {
  console.log('\nüá®üáø Test: ƒåesk√Ω SPAYD form√°t');
  
  const { response, data } = await apiRequest('/api/qr/generate', {
    method: 'POST',
    body: JSON.stringify({
      type: 'spayd',
      amount: 2500.00,
      currency: 'CZK',
      iban: 'CZ6508000000192000145399',
      variableSymbol: '87654321',
      constantSymbol: '0308',
      specificSymbol: '123',
      recipient: 'ACME Corporation s.r.o.',
      message: 'Faktura 2024001'
    })
  });
  
  if (response.ok && data.qrCode && data.spaydString) {
    console.log('‚úÖ SPAYD QR k√≥d vygenerov√°n');
    console.log(`   SPAYD: ${data.spaydString.substring(0, 50)}...`);
    
    // Ovƒõ≈ô√≠me SPAYD form√°t
    if (data.spaydString.startsWith('SPD*1.0*')) {
      console.log('   ‚úÖ SPAYD form√°t je spr√°vn√Ω');
      return true;
    } else {
      throw new Error('SPAYD ≈ôetƒõzec nem√° spr√°vn√Ω form√°t');
    }
  } else {
    throw new Error(`Chyba p≈ôi generov√°n√≠ SPAYD QR k√≥du: ${JSON.stringify(data)}`);
  }
}

async function testInvoiceQRCode() {
  console.log('\nüìÑ Test: QR k√≥d pro fakturu');
  
  // Nejprve vytvo≈ô√≠me testovac√≠ fakturu
  const invoiceData = {
    customerId: 1,
    invoiceNumber: `TEST-QR-${Date.now()}`,
    type: 'invoice',
    issueDate: new Date().toISOString(),
    dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
    subtotal: '1652.89',
    vatAmount: '347.11',
    total: '2000.00',
    currency: 'CZK',
    variableSymbol: '20240001',
    notes: 'Test faktura pro QR k√≥d'
  };
  
  const { response: createResponse, data: invoice } = await apiRequest('/api/invoices', {
    method: 'POST',
    body: JSON.stringify(invoiceData)
  });
  
  if (!createResponse.ok) {
    throw new Error('Nepoda≈ôilo se vytvo≈ôit testovac√≠ fakturu');
  }
  
  console.log(`   ‚úÖ Testovac√≠ faktura vytvo≈ôena: ${invoice.invoiceNumber}`);
  
  // Nyn√≠ vygenerujeme QR k√≥d pro fakturu
  const { response, data } = await apiRequest(`/api/invoices/${invoice.id}/qr`, {
    method: 'GET'
  });
  
  if (response.ok && data.qrCode) {
    console.log('‚úÖ QR k√≥d pro fakturu vygenerov√°n');
    
    // Ovƒõ≈ô√≠me, ≈æe obsahuje spr√°vn√© √∫daje
    if (data.paymentData) {
      const paymentData = data.paymentData;
      const expectedAmount = parseFloat(invoice.total);
      const actualAmount = parseFloat(paymentData.amount);
      
      if (Math.abs(expectedAmount - actualAmount) < 0.01) {
        console.log('   ‚úÖ ƒå√°stka v QR k√≥du je spr√°vn√°');
        return invoice.id;
      } else {
        throw new Error(`ƒå√°stka v QR k√≥du neodpov√≠d√°: oƒçek√°v√°no ${expectedAmount}, je ${actualAmount}`);
      }
    }
    
    return invoice.id;
  } else {
    throw new Error(`Chyba p≈ôi generov√°n√≠ QR k√≥du pro fakturu: ${JSON.stringify(data)}`);
  }
}

async function testQRCodeInPDF(invoiceId) {
  console.log('\nüìë Test: QR k√≥d v PDF faktury');
  
  if (!invoiceId) {
    console.log('‚ö†Ô∏è P≈ôeskakujem test - chyb√≠ ID faktury');
    return false;
  }
  
  const response = await fetch(`${BASE_URL}/api/invoices/${invoiceId}/pdf`, {
    headers: { 'Authorization': 'Bearer test-session-dev' }
  });
  
  if (response.ok) {
    const pdfBuffer = await response.arrayBuffer();
    const pdfSize = pdfBuffer.byteLength;
    
    console.log(`‚úÖ PDF s QR k√≥dem vygenerov√°no (${pdfSize} byt≈Ø)`);
    
    // Z√°kladn√≠ kontrola, ≈æe PDF obsahuje nƒõjak√Ω obsah
    if (pdfSize > 10000) { // PDF by mƒõlo b√Ωt vƒõt≈°√≠ ne≈æ 10KB
      console.log('   ‚úÖ PDF m√° rozumnou velikost');
      
      // Konvertujeme na string a hled√°me QR indik√°tory
      const pdfString = new TextDecoder().decode(pdfBuffer);
      if (pdfString.includes('QR') || pdfString.includes('data:image')) {
        console.log('   ‚úÖ PDF pravdƒõpodobnƒõ obsahuje QR k√≥d');
        return true;
      } else {
        console.log('   ‚ö†Ô∏è Nelze ovƒõ≈ôit p≈ô√≠tomnost QR k√≥du v PDF');
        return true; // Nebudeme pova≈æovat za chybu
      }
    } else {
      throw new Error('PDF je p≈ô√≠li≈° mal√©');
    }
  } else {
    throw new Error(`Chyba p≈ôi generov√°n√≠ PDF: ${response.status}`);
  }
}

async function testQRCodeValidation() {
  console.log('\n‚úÖ Test: Validace QR k√≥du parametr≈Ø');
  
  const invalidTests = [
    {
      name: 'Pr√°zdn√° ƒç√°stka',
      data: { amount: '', currency: 'CZK', iban: 'CZ1234567890123456789012' },
      expectedError: 'amount'
    },
    {
      name: 'Neplatn√Ω IBAN',
      data: { amount: 1000, currency: 'CZK', iban: 'INVALID_IBAN' },
      expectedError: 'iban'
    },
    {
      name: 'Chybƒõj√≠c√≠ p≈ô√≠jemce',
      data: { amount: 1000, currency: 'CZK', iban: 'CZ1234567890123456789012', recipient: '' },
      expectedError: 'recipient'
    }
  ];
  
  let allCorrect = true;
  
  for (const test of invalidTests) {
    try {
      const { response, data } = await apiRequest('/api/qr/generate', {
        method: 'POST',
        body: JSON.stringify({ type: 'payment', ...test.data })
      });
      
      if (response.ok) {
        console.log(`   ‚ùå ${test.name} - mƒõlo selhat, ale pro≈°lo`);
        allCorrect = false;
      } else {
        console.log(`   ‚úÖ ${test.name} - spr√°vnƒõ odm√≠tnuto`);
      }
    } catch (error) {
      console.log(`   ‚úÖ ${test.name} - spr√°vnƒõ odm√≠tnuto s chybou`);
    }
  }
  
  return allCorrect;
}

async function testQRCodeCustomization() {
  console.log('\nüé® Test: P≈ôizp≈Øsoben√≠ QR k√≥du');
  
  const { response, data } = await apiRequest('/api/qr/generate', {
    method: 'POST',
    body: JSON.stringify({
      type: 'payment',
      amount: 999.99,
      currency: 'CZK',
      iban: 'CZ1234567890123456789012',
      recipient: 'Custom Test',
      options: {
        size: 512,
        margin: 2,
        errorCorrectionLevel: 'H',
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        }
      }
    })
  });
  
  if (response.ok && data.qrCode) {
    console.log('‚úÖ QR k√≥d s vlastn√≠m nastaven√≠m vygenerov√°n');
    
    // Ovƒõ≈ô√≠me, ≈æe je vƒõt≈°√≠ (512px vs standardn√≠ch 256px)
    const base64Length = data.qrCode.length;
    if (base64Length > 10000) { // Vƒõt≈°√≠ QR k√≥d = v√≠ce dat
      console.log('   ‚úÖ Velikost QR k√≥du byla zvƒõt≈°ena');
      return true;
    } else {
      console.log('   ‚ö†Ô∏è Velikost QR k√≥du nebyla zmƒõnƒõna');
      return true; // Nebudeme pova≈æovat za chybu
    }
  } else {
    throw new Error(`Chyba p≈ôi generov√°n√≠ p≈ôizp≈Øsoben√©ho QR k√≥du: ${JSON.stringify(data)}`);
  }
}

export async function runQRTests() {
  console.log('üéØ SPOU≈†T√çM QR K√ìDY TESTY');
  console.log('='.repeat(40));
  
  const tester = new QRTester();
  let invoiceId = null;
  
  await tester.test('QR Code Generation', testQRCodeGeneration);
  await tester.test('SPAYD Format', testSPAYDFormat);
  
  await tester.test('Invoice QR Code', async () => {
    invoiceId = await testInvoiceQRCode();
    if (!invoiceId) throw new Error('Nepoda≈ôilo se vytvo≈ôit QR pro fakturu');
  });
  
  await tester.test('QR Code in PDF', async () => {
    const success = await testQRCodeInPDF(invoiceId);
    if (!success) throw new Error('QR k√≥d v PDF selhal');
  });
  
  await tester.test('QR Code Validation', testQRCodeValidation);
  await tester.test('QR Code Customization', testQRCodeCustomization);
  
  return tester.summary();
}

// Spu≈°tƒõn√≠ test≈Ø pokud je soubor spu≈°tƒõn p≈ô√≠mo
if (import.meta.url === `file://${process.argv[1]}`) {
  runQRTests().then(success => {
    process.exit(success ? 0 : 1);
  }).catch(error => {
    console.error('Chyba p≈ôi spou≈°tƒõn√≠ test≈Ø:', error);
    process.exit(1);
  });
}