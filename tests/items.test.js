/**
 * Items Tests - Direct Invoice and Expense Items CRUD
 * Run with: node tests/items.test.js
 */

import { apiRequest } from './helpers/test-utils.js';

const BASE_URL = 'http://localhost:5000';

class ItemsTester {
  constructor() {
    this.passed = 0;
    this.failed = 0;
    this.results = [];
  }

  async test(name, testFn) {
    try {
      console.log(`üìù Testing: ${name}`);
      await testFn();
      console.log(`‚úÖ PASSED: ${name}`);
      this.passed++;
      this.results.push({ name, status: 'PASSED' });
    } catch (error) {
      console.log(`‚ùå FAILED: ${name} - ${error.message}`);
      this.failed++;
      this.results.push({ name, status: 'FAILED', error: error.message });
    }
  }

  summary() {
    console.log('\n=== ITEMS TEST SUMMARY ===');
    console.log(`‚úÖ Passed: ${this.passed}`);
    console.log(`‚ùå Failed: ${this.failed}`);
    console.log(`üìä Total: ${this.passed + this.failed}`);
    
    if (this.failed > 0) {
      console.log('\n‚ùå Failed Tests:');
      this.results.filter(r => r.status === 'FAILED').forEach(r => {
        console.log(`  - ${r.name}: ${r.error}`);
      });
    }
    
    return this.failed === 0;
  }
}

async function setupTestInvoice() {
  console.log('\nüßæ P≈ô√≠prava: Vytvo≈ôen√≠ testovac√≠ faktury');
  
  const invoiceData = {
    customerId: 1,
    invoiceNumber: `TEST-ITEMS-${Date.now()}`,
    type: 'invoice',
    issueDate: new Date().toISOString(),
    dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
    subtotal: '0.00',
    vatAmount: '0.00', 
    total: '0.00',
    currency: 'CZK',
    notes: 'Test faktura pro items testy'
  };
  
  const { response, data } = await apiRequest('/api/invoices', {
    method: 'POST',
    body: JSON.stringify(invoiceData)
  });
  
  if (response.ok) {
    console.log(`   ‚úÖ Testovac√≠ faktura vytvo≈ôena: ${data.invoiceNumber}`);
    return data.id;
  } else {
    throw new Error('Nepoda≈ôilo se vytvo≈ôit testovac√≠ fakturu');
  }
}

async function setupTestExpense() {
  console.log('\nüí∞ P≈ô√≠prava: Vytvo≈ôen√≠ testov√©ho n√°kladu');
  
  const expenseData = {
    supplierId: 1,
    expenseNumber: `TEST-EXP-${Date.now()}`,
    issueDate: new Date().toISOString(),
    description: 'Test n√°klad pro items testy',
    category: 'office',
    subtotal: '0.00',
    vatAmount: '0.00',
    total: '0.00',
    currency: 'CZK'
  };
  
  const { response, data } = await apiRequest('/api/expenses', {
    method: 'POST', 
    body: JSON.stringify(expenseData)
  });
  
  if (response.ok) {
    console.log(`   ‚úÖ Testov√Ω n√°klad vytvo≈ôen: ${data.expenseNumber}`);
    return data.id;
  } else {
    throw new Error('Nepoda≈ôilo se vytvo≈ôit testov√Ω n√°klad');
  }
}

async function testInvoiceItemCreate(invoiceId) {
  console.log('\n‚ûï Test: Vytvo≈ôen√≠ polo≈æky faktury');
  
  if (!invoiceId) {
    throw new Error('Chyb√≠ ID faktury');
  }
  
  const itemData = {
    invoiceId: invoiceId,
    description: 'Webov√© str√°nky - design a v√Ωvoj',
    quantity: 1,
    unit: 'ks',
    unitPrice: '25000.00',
    vatRate: 21,
    vatAmount: '5250.00',
    total: '30250.00'
  };
  
  const { response, data } = await apiRequest(`/api/invoices/${invoiceId}/items`, {
    method: 'POST',
    body: JSON.stringify(itemData)
  });
  
  if (response.ok) {
    console.log('‚úÖ Polo≈æka faktury vytvo≈ôena');
    console.log(`   ID: ${data.id}, Popis: ${data.description}`);
    console.log(`   ƒå√°stka: ${data.total} ${data.currency || 'CZK'}`);
    return data.id;
  } else {
    throw new Error(`Chyba p≈ôi vytv√°≈ôen√≠ polo≈æky: ${JSON.stringify(data)}`);
  }
}

async function testInvoiceItemsRead(invoiceId) {
  console.log('\nüìã Test: Naƒçten√≠ polo≈æek faktury');
  
  if (!invoiceId) {
    throw new Error('Chyb√≠ ID faktury');
  }
  
  const { response, data } = await apiRequest(`/api/invoices/${invoiceId}/items`);
  
  if (response.ok) {
    console.log(`‚úÖ Naƒçteno ${data.length} polo≈æek faktury`);
    
    if (data.length > 0) {
      const item = data[0];
      const requiredFields = ['id', 'description', 'quantity', 'unitPrice', 'total'];
      const hasAllFields = requiredFields.every(field => item.hasOwnProperty(field));
      
      if (hasAllFields) {
        console.log('   ‚úÖ Struktura polo≈æek v po≈ô√°dku');
        data.forEach((item, index) => {
          console.log(`   ${index + 1}. ${item.description} - ${item.total}`);
        });
        return data;
      } else {
        throw new Error('Chyb√≠ povinn√° pole v polo≈æk√°ch');
      }
    }
    
    return data;
  } else {
    throw new Error(`Chyba p≈ôi naƒç√≠t√°n√≠ polo≈æek: ${JSON.stringify(data)}`);
  }
}

async function testInvoiceItemUpdate(invoiceId, itemId) {
  console.log('\n‚úèÔ∏è Test: √öprava polo≈æky faktury');
  
  if (!invoiceId || !itemId) {
    throw new Error('Chyb√≠ ID faktury nebo polo≈æky');
  }
  
  const updateData = {
    description: 'Webov√© str√°nky - design, v√Ωvoj a hosting',
    quantity: 1,
    unitPrice: '28000.00',
    vatRate: 21,
    vatAmount: '5880.00', 
    total: '33880.00'
  };
  
  const { response, data } = await apiRequest(`/api/invoices/${invoiceId}/items/${itemId}`, {
    method: 'PATCH',
    body: JSON.stringify(updateData)
  });
  
  if (response.ok) {
    console.log('‚úÖ Polo≈æka faktury upravena');
    console.log(`   Nov√Ω popis: ${data.description}`);
    console.log(`   Nov√° ƒç√°stka: ${data.total}`);
    return true;
  } else {
    throw new Error(`Chyba p≈ôi √∫pravƒõ polo≈æky: ${JSON.stringify(data)}`);
  }
}

async function testInvoiceItemDelete(invoiceId, itemId) {
  console.log('\nüóëÔ∏è Test: Smaz√°n√≠ polo≈æky faktury');
  
  if (!invoiceId || !itemId) {
    throw new Error('Chyb√≠ ID faktury nebo polo≈æky');
  }
  
  const { response, data } = await apiRequest(`/api/invoices/${invoiceId}/items/${itemId}`, {
    method: 'DELETE'
  });
  
  if (response.ok || response.status === 204) {
    console.log('‚úÖ Polo≈æka faktury smaz√°na');
    
    // Ovƒõ≈ô√≠me, ≈æe polo≈æka u≈æ neexistuje
    const { response: checkResponse, data: checkData } = await apiRequest(`/api/invoices/${invoiceId}/items`);
    
    if (checkResponse.ok) {
      const found = checkData.find(item => item.id === itemId);
      if (!found) {
        console.log('   ‚úÖ Polo≈æka u≈æ nen√≠ v seznamu');
        return true;
      } else {
        throw new Error('Polo≈æka st√°le existuje po smaz√°n√≠');
      }
    }
    
    return true;
  } else {
    throw new Error(`Chyba p≈ôi maz√°n√≠ polo≈æky: ${JSON.stringify(data)}`);
  }
}

async function testExpenseItemCreate(expenseId) {
  console.log('\n‚ûï Test: Vytvo≈ôen√≠ polo≈æky n√°kladu');
  
  if (!expenseId) {
    throw new Error('Chyb√≠ ID n√°kladu');
  }
  
  const itemData = {
    expenseId: expenseId,
    description: 'Kancel√°≈ôsk√© pot≈ôeby - pap√≠r A4',
    quantity: 5,
    unit: 'balen√≠',
    unitPrice: '120.00',
    vatRate: 21,
    vatAmount: '126.00',
    total: '726.00'
  };
  
  const { response, data } = await apiRequest(`/api/expenses/${expenseId}/items`, {
    method: 'POST',
    body: JSON.stringify(itemData)
  });
  
  if (response.ok) {
    console.log('‚úÖ Polo≈æka n√°kladu vytvo≈ôena');
    console.log(`   ID: ${data.id}, Popis: ${data.description}`);
    console.log(`   ƒå√°stka: ${data.total}`);
    return data.id;
  } else {
    throw new Error(`Chyba p≈ôi vytv√°≈ôen√≠ polo≈æky n√°kladu: ${JSON.stringify(data)}`);
  }
}

async function testExpenseItemsRead(expenseId) {
  console.log('\nüìã Test: Naƒçten√≠ polo≈æek n√°kladu');
  
  if (!expenseId) {
    throw new Error('Chyb√≠ ID n√°kladu');
  }
  
  const { response, data } = await apiRequest(`/api/expenses/${expenseId}/items`);
  
  if (response.ok) {
    console.log(`‚úÖ Naƒçteno ${data.length} polo≈æek n√°kladu`);
    
    if (data.length > 0) {
      data.forEach((item, index) => {
        console.log(`   ${index + 1}. ${item.description} - ${item.total}`);
      });
    }
    
    return data;
  } else {
    throw new Error(`Chyba p≈ôi naƒç√≠t√°n√≠ polo≈æek n√°kladu: ${JSON.stringify(data)}`);
  }
}

async function testExpenseItemUpdate(expenseId, itemId) {
  console.log('\n‚úèÔ∏è Test: √öprava polo≈æky n√°kladu');
  
  if (!expenseId || !itemId) {
    throw new Error('Chyb√≠ ID n√°kladu nebo polo≈æky');
  }
  
  const updateData = {
    description: 'Kancel√°≈ôsk√© pot≈ôeby - pap√≠r A4 premium',
    quantity: 5,
    unitPrice: '150.00',
    vatRate: 21,
    vatAmount: '157.50',
    total: '907.50'
  };
  
  const { response, data } = await apiRequest(`/api/expenses/${expenseId}/items/${itemId}`, {
    method: 'PATCH',
    body: JSON.stringify(updateData)
  });
  
  if (response.ok) {
    console.log('‚úÖ Polo≈æka n√°kladu upravena');
    console.log(`   Nov√Ω popis: ${data.description}`);
    console.log(`   Nov√° ƒç√°stka: ${data.total}`);
    return true;
  } else {
    throw new Error(`Chyba p≈ôi √∫pravƒõ polo≈æky n√°kladu: ${JSON.stringify(data)}`);
  }
}

async function testExpenseItemDelete(expenseId, itemId) {
  console.log('\nüóëÔ∏è Test: Smaz√°n√≠ polo≈æky n√°kladu');
  
  if (!expenseId || !itemId) {
    throw new Error('Chyb√≠ ID n√°kladu nebo polo≈æky');
  }
  
  const { response, data } = await apiRequest(`/api/expenses/${expenseId}/items/${itemId}`, {
    method: 'DELETE'
  });
  
  if (response.ok || response.status === 204) {
    console.log('‚úÖ Polo≈æka n√°kladu smaz√°na');
    return true;
  } else {
    throw new Error(`Chyba p≈ôi maz√°n√≠ polo≈æky n√°kladu: ${JSON.stringify(data)}`);
  }
}

async function testItemsValidation() {
  console.log('\n‚úÖ Test: Validace polo≈æek');
  
  const invalidTests = [
    {
      name: 'Pr√°zdn√Ω popis',
      data: { description: '', quantity: 1, unitPrice: '100.00' },
      expectedError: 'description'
    },
    {
      name: 'Z√°porn√° ƒç√°stka',
      data: { description: 'Test', quantity: 1, unitPrice: '-100.00' },
      expectedError: 'unitPrice'
    },
    {
      name: 'Nulov√© mno≈æstv√≠',
      data: { description: 'Test', quantity: 0, unitPrice: '100.00' },
      expectedError: 'quantity'
    }
  ];
  
  let allCorrect = true;
  
  for (const test of invalidTests) {
    try {
      const { response, data } = await apiRequest('/api/invoices/1/items', {
        method: 'POST',
        body: JSON.stringify({ invoiceId: 1, ...test.data })
      });
      
      if (response.ok) {
        console.log(`   ‚ùå ${test.name} - mƒõlo selhat, ale pro≈°lo`);
        allCorrect = false;
      } else {
        console.log(`   ‚úÖ ${test.name} - spr√°vnƒõ odm√≠tnuto`);
      }
    } catch (error) {
      console.log(`   ‚úÖ ${test.name} - spr√°vnƒõ odm√≠tnuto s chybou`);
    }
  }
  
  return allCorrect;
}

async function testBulkItemOperations(invoiceId) {
  console.log('\nüì¶ Test: Hromadn√© operace s polo≈ækami');
  
  if (!invoiceId) {
    throw new Error('Chyb√≠ ID faktury');
  }
  
  // Vytvo≈ô√≠me v√≠ce polo≈æek najednou
  const items = [
    {
      description: 'Polo≈æka 1',
      quantity: 1,
      unitPrice: '1000.00',
      vatRate: 21,
      vatAmount: '210.00',
      total: '1210.00'
    },
    {
      description: 'Polo≈æka 2', 
      quantity: 2,
      unitPrice: '500.00',
      vatRate: 21,
      vatAmount: '210.00',
      total: '1210.00'
    },
    {
      description: 'Polo≈æka 3',
      quantity: 1,
      unitPrice: '750.00',
      vatRate: 21,
      vatAmount: '157.50',
      total: '907.50'
    }
  ];
  
  const { response, data } = await apiRequest(`/api/invoices/${invoiceId}/items/bulk`, {
    method: 'POST',
    body: JSON.stringify({ items: items.map(item => ({ invoiceId, ...item })) })
  });
  
  if (response.ok) {
    console.log(`‚úÖ Hromadn√© vytvo≈ôen√≠ - ${data.length} polo≈æek`);
    data.forEach((item, index) => {
      console.log(`   ${index + 1}. ${item.description} - ${item.total}`);
    });
    return data.map(item => item.id);
  } else {
    // Pokud bulk endpoint nen√≠ implementov√°n, vytvo≈ô√≠me polo≈æky jednotlivƒõ
    console.log('‚ö†Ô∏è Bulk endpoint nen√≠ implementov√°n, vytv√°≈ô√≠me jednotlivƒõ');
    const createdIds = [];
    
    for (const item of items) {
      try {
        const { response: singleResponse, data: singleData } = await apiRequest(`/api/invoices/${invoiceId}/items`, {
          method: 'POST',
          body: JSON.stringify({ invoiceId, ...item })
        });
        
        if (singleResponse.ok) {
          createdIds.push(singleData.id);
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è Chyba p≈ôi vytv√°≈ôen√≠ polo≈æky: ${error.message}`);
      }
    }
    
    console.log(`‚úÖ Jednotliv√© vytvo≈ôen√≠ - ${createdIds.length} polo≈æek`);
    return createdIds;
  }
}

export async function runItemsTests() {
  console.log('üéØ SPOU≈†T√çM ITEMS TESTY');
  console.log('='.repeat(40));
  
  const tester = new ItemsTester();
  let testData = { invoiceId: null, expenseId: null, itemIds: [] };
  
  // P≈ô√≠prava testovac√≠ch dat
  testData.invoiceId = await setupTestInvoice();
  testData.expenseId = await setupTestExpense();
  
  // Invoice Items testy
  await tester.test('Invoice Item Create', async () => {
    const itemId = await testInvoiceItemCreate(testData.invoiceId);
    if (!itemId) throw new Error('Nepoda≈ôilo se vytvo≈ôit polo≈æku faktury');
    testData.itemIds.push(itemId);
  });
  
  await tester.test('Invoice Items Read', async () => {
    const items = await testInvoiceItemsRead(testData.invoiceId);
    if (!items || items.length === 0) throw new Error('≈Ω√°dn√© polo≈æky nenalezeny');
  });
  
  await tester.test('Invoice Item Update', async () => {
    const success = await testInvoiceItemUpdate(testData.invoiceId, testData.itemIds[0]);
    if (!success) throw new Error('Nepoda≈ôilo se upravit polo≈æku');
  });
  
  await tester.test('Bulk Item Operations', async () => {
    const bulkIds = await testBulkItemOperations(testData.invoiceId);
    testData.itemIds.push(...bulkIds);
  });
  
  // Expense Items testy
  await tester.test('Expense Item Create', async () => {
    const itemId = await testExpenseItemCreate(testData.expenseId);
    if (!itemId) throw new Error('Nepoda≈ôilo se vytvo≈ôit polo≈æku n√°kladu');
    testData.expenseItemId = itemId;
  });
  
  await tester.test('Expense Items Read', async () => {
    const items = await testExpenseItemsRead(testData.expenseId);
    if (!items) throw new Error('Chyba p≈ôi naƒç√≠t√°n√≠ polo≈æek n√°kladu');
  });
  
  await tester.test('Expense Item Update', async () => {
    const success = await testExpenseItemUpdate(testData.expenseId, testData.expenseItemId);
    if (!success) throw new Error('Nepoda≈ôilo se upravit polo≈æku n√°kladu');
  });
  
  await tester.test('Items Validation', testItemsValidation);
  
  // Cleanup testy
  await tester.test('Invoice Item Delete', async () => {
    const success = await testInvoiceItemDelete(testData.invoiceId, testData.itemIds[0]);
    if (!success) throw new Error('Nepoda≈ôilo se smazat polo≈æku faktury');
  });
  
  await tester.test('Expense Item Delete', async () => {
    const success = await testExpenseItemDelete(testData.expenseId, testData.expenseItemId);
    if (!success) throw new Error('Nepoda≈ôilo se smazat polo≈æku n√°kladu');
  });
  
  return tester.summary();
}

// Spu≈°tƒõn√≠ test≈Ø pokud je soubor spu≈°tƒõn p≈ô√≠mo
if (import.meta.url === `file://${process.argv[1]}`) {
  runItemsTests().then(success => {
    process.exit(success ? 0 : 1);
  }).catch(error => {
    console.error('Chyba p≈ôi spou≈°tƒõn√≠ test≈Ø:', error);
    process.exit(1);
  });
}