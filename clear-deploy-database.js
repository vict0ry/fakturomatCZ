// Script pro vymaz√°n√≠ dat v deploy datab√°zi
// POZOR: Toto vyma≈æe v≈°echna data v deploy datab√°zi!

import { Pool } from '@neondatabase/serverless';

// Pou≈æije DATABASE_URL z prost≈ôed√≠ (deploy m√° vlastn√≠)
const pool = new Pool({ 
  connectionString: process.env.DATABASE_URL 
});

async function clearDeployDatabase() {
  try {
    console.log('üö® POZOR: Ma≈æu v≈°echna data v deploy datab√°zi!');
    
    // Vymazat data v spr√°vn√©m po≈ôad√≠ (kv≈Øli foreign key constraints)
    await pool.query('DELETE FROM invoice_items');
    await pool.query('DELETE FROM expense_items');  
    await pool.query('DELETE FROM invoices');
    await pool.query('DELETE FROM expenses');
    await pool.query('DELETE FROM customers');
    await pool.query('DELETE FROM chat_messages');
    await pool.query('DELETE FROM invoice_history');
    await pool.query('DELETE FROM reminders');
    await pool.query('DELETE FROM payment_matching_rules');
    await pool.query('DELETE FROM bank_transactions');
    
    // Ponechat users a companies pro p≈ôihl√°≈°en√≠
    console.log('‚úÖ Deploy datab√°ze vymaz√°na (kromƒõ users a companies)');
    
    // Zkontrolovat v√Ωsledek
    const result = await pool.query(`
      SELECT 
        'invoices' as table_name, COUNT(*) as count FROM invoices
      UNION ALL
      SELECT 'customers', COUNT(*) FROM customers  
      UNION ALL
      SELECT 'expenses', COUNT(*) FROM expenses
    `);
    
    console.log('üìä Stav po vymaz√°n√≠:');
    result.rows.forEach(row => {
      console.log(`${row.table_name}: ${row.count} z√°znam≈Ø`);
    });
    
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi maz√°n√≠ deploy datab√°ze:', error);
  } finally {
    await pool.end();
  }
}

clearDeployDatabase();