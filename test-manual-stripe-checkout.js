#!/usr/bin/env node

/**
 * MANU√ÅLN√ç STRIPE CHECKOUT TEST
 * 
 * Tento script ti pom≈Ø≈æe otestovat cel√Ω Stripe checkout flow
 * s fale≈°n√Ωmi kartami bez skuteƒçn√Ωch poplatk≈Ø
 */

import { setupTestUser, loginTestUser } from './tests/test-utils.js';

console.log('üéØ MANU√ÅLN√ç STRIPE CHECKOUT TEST');
console.log('================================');
console.log('');

async function createManualTest() {
  try {
    // Create test user pro manual testing
    console.log('üîß Vytv√°≈ôen√≠ test u≈æivatele...');
    const { userId, token, username, password } = await setupTestUser();
    
    console.log('‚úÖ Test u≈æivatel vytvo≈ôen:');
    console.log(`   üìß Email: ${username}`);
    console.log(`   üîë Heslo: ${password}`);
    console.log(`   üÜî User ID: ${userId}`);
    console.log(`   üé´ Token: ${token.substring(0, 20)}...`);
    console.log('');
    
    // Test checkout session creation
    console.log('üí≥ Testov√°n√≠ vytvo≈ôen√≠ checkout session...');
    const response = await fetch('http://localhost:5000/api/stripe/create-checkout-session', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Checkout session √∫spƒõ≈°nƒõ vytvo≈ôena!');
      console.log(`   üîó Session ID: ${data.sessionId}`);
      console.log(`   üåê Checkout URL: ${data.url}`);
      console.log('');
      
      console.log('üéØ MANU√ÅLN√ç TESTOVAC√ç POSTUP:');
      console.log('============================');
      console.log('1. Otev≈ôi tento odkaz v prohl√≠≈æeƒçi:');
      console.log(`   ${data.url}`);
      console.log('');
      console.log('2. Pou≈æij TESTOVAC√ç kartu (≈æ√°dn√© skuteƒçn√© pen√≠ze se nestrhnou!):');
      console.log('   üí≥ ƒå√≠slo karty: 4242424242424242');
      console.log('   üìÖ Expiry: 12/25');
      console.log('   üîí CVC: 123');
      console.log('   üìÆ ZIP: 12345');
      console.log('   üë§ Jm√©no: Test User');
      console.log('');
      console.log('3. Po dokonƒçen√≠ platby se vr√°t√≠≈° na success page');
      console.log('');
      console.log('4. Zkontroluj subscription status:');
      console.log('   http://localhost:5000/subscription');
      console.log('');
      console.log('5. ALTERNATIVN√ç LOGIN (pokud se odhl√°s√≠≈°):');
      console.log(`   üìß Email: ${username}`);
      console.log(`   üîë Heslo: ${password}`);
      console.log('   üåê Login: http://localhost:5000/login');
      console.log('');
      
      console.log('üß™ DAL≈†√ç TESTOVAC√ç KARTY:');
      console.log('========================');
      console.log('‚ùå ZAM√çTNUT√Å KARTA:       4000000000000002');
      console.log('üí∏ NEDOSTATEK PROST≈òEDK≈Æ: 4000000000009995');
      console.log('üîê VY≈ΩADUJE OVƒö≈òEN√ç:      4000000000000341');
      console.log('‚è∞ PRO≈†L√Å KARTA:         4000000000000069');
      console.log('');
      
      console.log('üìä CO OƒåEK√ÅVAT VE STRIPE DASHBOARDU:');
      console.log('===================================');
      console.log('Po dokonƒçen√≠ platby uvid√≠≈°:');
      console.log('- Nov√©ho z√°kazn√≠ka v "Customers"');
      console.log('- Subscription v "Subscriptions"');
      console.log('- Payment Intent v "Payments"');
      console.log('- Webhook ud√°losti v "Developers > Webhooks"');
      console.log('');
      
      console.log('‚ö†Ô∏è  D≈ÆLE≈ΩIT√â:');
      console.log('=============');
      console.log('- V≈°echny platby jsou v TEST m√≥du');
      console.log('- ≈Ω√°dn√© skuteƒçn√© pen√≠ze se nestrh√°vaj√≠');
      console.log('- Test data m≈Ø≈æe≈° smazat kdykoli');
      console.log('- Pro produkci pou≈æij LIVE kl√≠ƒçe');
      
    } else {
      console.log('‚ùå Chyba p≈ôi vytv√°≈ôen√≠ checkout session:');
      console.log(`   Status: ${response.status}`);
      console.log(`   Error: ${await response.text()}`);
    }
    
  } catch (error) {
    console.error('üö® Chyba:', error.message);
  }
}

// Spus≈• test
createManualTest();