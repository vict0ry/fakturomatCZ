import type { UniversalAIResponse } from "./types.js";

export class NavigationHandler {
  
  handleNavigation(message: string): UniversalAIResponse | null {
    const msg = message.toLowerCase();

    // Dashboard navigation
    if (msg.includes('dashboard') || msg.includes('p≈ôehled') || msg.includes('dom≈Ø')) {
      return {
        content: "üè† P≈ôech√°z√≠m na hlavn√≠ dashboard...",
        action: { type: 'navigate', data: { path: '/dashboard' } }
      };
    }

    // Customers navigation
    if (msg.includes('z√°kazn√≠k') || msg.includes('customer') || msg.includes('klient')) {
      return {
        content: "üë• P≈ôech√°z√≠m na str√°nku se z√°kazn√≠ky...",
        action: { type: 'navigate', data: { path: '/customers' } }
      };
    }

    // Invoices navigation
    if (msg.includes('faktur') || msg.includes('invoice') || msg.includes('√∫ƒçt')) {
      return {
        content: "üìã Zobrazuji v≈°echny faktury...",
        action: { type: 'navigate', data: { path: '/invoices' } }
      };
    }

    // Settings navigation
    if (msg.includes('nastaven√≠') || msg.includes('setting') || msg.includes('konfigurac')) {
      return {
        content: "‚öôÔ∏è Otev√≠r√°m nastaven√≠ aplikace...",
        action: { type: 'navigate', data: { path: '/settings' } }
      };
    }

    // Analytics navigation
    if (msg.includes('anal√Ωz') || msg.includes('statist') || msg.includes('report') || msg.includes('p≈ôehled')) {
      return {
        content: "üìä Zobrazuji analytick√© p≈ôehledy...",
        action: { type: 'navigate', data: { path: '/analytics' } }
      };
    }

    return null;
  }

  handleSearch(message: string): UniversalAIResponse | null {
    const msg = message.toLowerCase();

    // Search by customer
    if (msg.includes('najdi') || msg.includes('vyhledej') || msg.includes('zobraz')) {
      // Extract customer name for search
      const customerMatch = msg.match(/(?:pro|z√°kazn√≠k[aei]?)\s+([^,\s]+(?:\s+[^,\s]+)*)/);
      if (customerMatch) {
        const customerName = customerMatch[1];
        return {
          content: `Vyhled√°v√°m faktury pro z√°kazn√≠ka "${customerName}"...`,
          action: { 
            type: 'navigate', 
            data: { path: `/invoices?customer=${encodeURIComponent(customerName)}` } 
          }
        };
      }

      // Filter by status - improved detection
      if (msg.includes('neplacen') || msg.includes('nezaplacen') || msg.includes('pending') || msg.includes('odeslan√©')) {
        return {
          content: "Filtruji neplacen√© faktury podle va≈°eho po≈æadavku...",
          action: { type: 'navigate', data: { path: '/invoices?status=sent' } }
        };
      }

      if (msg.includes('zaplacen') || msg.includes('uhrazen') || msg.includes('paid')) {
        return {
          content: "Filtruji zaplacen√© faktury podle va≈°eho po≈æadavku...",
          action: { type: 'navigate', data: { path: '/invoices?status=paid' } }
        };
      }

      if (msg.includes('po splatnosti') || msg.includes('overdue') || msg.includes('pro≈°l')) {
        return {
          content: "Zobrazuji faktury po splatnosti...",
          action: { type: 'navigate', data: { path: '/invoices?status=overdue' } }
        };
      }

      // Default invoice search
      return {
        content: "Zobrazuji v≈°echny faktury...",
        action: { type: 'navigate', data: { path: '/invoices' } }
      };
    }

    return null;
  }

  handleStatusUpdate(message: string): UniversalAIResponse | null {
    const msg = message.toLowerCase();

    // Status change patterns
    const statusPatterns = [
      { keywords: ['oznaƒç', 'zmƒõ≈à', 'nastav'], status: 'paid', text: 'zaplacen' },
      { keywords: ['ode≈°li', 'po≈°li', 'send'], status: 'sent', text: 'odesl√°n' },
      { keywords: ['storno', 'zru≈°'], status: 'cancelled', text: 'zru≈°en' }
    ];

    for (const pattern of statusPatterns) {
      if (pattern.keywords.some(keyword => msg.includes(keyword))) {
        // Extract invoice number
        const invoiceMatch = msg.match(/(?:fakturu?|invoice)\s*(\w+)/);
        if (invoiceMatch) {
          const invoiceNumber = invoiceMatch[1];
          return {
            content: `‚úÖ Oznaƒçuji fakturu ${invoiceNumber} jako ${pattern.text}...`,
            action: { 
              type: 'update_status', 
              data: { invoiceNumber, status: pattern.status } 
            }
          };
        }
      }
    }

    return null;
  }

  handleHelp(message: string): UniversalAIResponse | null {
    const msg = message.toLowerCase();

    if (msg.includes('pomoc') || msg.includes('help') || msg.includes('co um√≠≈°') || msg.includes('n√°povƒõda')) {
      const { HELP_RESPONSE } = require('./prompts.js');
      return { content: HELP_RESPONSE };
    }

    return null;
  }

  getContextualResponse(currentPath: string): string {
    switch (currentPath) {
      case '/dashboard':
        return "Na hlavn√≠m dashboardu vid√≠te p≈ôehled faktur, statistiky a rychl√© akce. Mohu v√°m pomoci vytvo≈ôit novou fakturu nebo navigovat kamkoli pot≈ôebujete.";
      case '/invoices':
        return "Na str√°nce s fakturami m≈Ø≈æete spravovat v≈°echny va≈°e faktury. Mohu v√°m pomoci vyhledat konkr√©tn√≠ faktury nebo vytvo≈ôit nov√©.";
      case '/customers':
        return "Zde spravujete z√°kazn√≠ky. Mohu v√°m pomoci naj√≠t z√°kazn√≠ka nebo vytvo≈ôit fakturu pro existuj√≠c√≠ho z√°kazn√≠ka.";
      case '/analytics':
        return "V analytick√©m p≈ôehledu vid√≠te statistiky va≈°eho podnik√°n√≠. Mohu v√°m pomoci s interpretac√≠ dat nebo vytvo≈ôit nov√© faktury.";
      case '/settings':
        return "V nastaven√≠ m≈Ø≈æete upravit konfiguraci aplikace. Mohu v√°m pomoci s navigac√≠ nebo vytvo≈ôen√≠m faktur.";
      default:
        return "Nach√°z√≠te se v fakturaƒçn√≠m syst√©mu. Mohu v√°m pomoci s vytv√°≈ôen√≠m faktur, vyhled√°v√°n√≠m nebo navigac√≠.";
    }
  }
}